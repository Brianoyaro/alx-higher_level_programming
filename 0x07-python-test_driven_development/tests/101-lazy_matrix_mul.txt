First import the module and required function
>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Test Cases
1) Passing nothing
>>> lazy_matrix_mul()
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

2)Passing one argument
>>> lazy_matrix_mul([[1,2,3]])
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

3) Passing non list
>>> lazy_matrix_mul([[1,2,3]], 'Hello world')
Traceback (most recent call last):
TypeError: ufunc 'multiply' did not contain a loop with signature matching types dtype('<U11') dtype('<U11') dtype('<U11')

4)Passing list where one element is not an integer or float
>>> lazy_matrix_mul([[1,2,3]], [[1,2,'3']])
Traceback (most recent call last):
ValueError: shapes (1,3) and (1,3) not aligned: 3 (dim 1) != 1 (dim 0)

5) Passing a matrix with unequal rows i.e not rectangular
>>> lazy_matrix_mul([[1,2,3]], [[1,2,3], [4,5,6,7]])
Traceback (most recent call last):
ValueError: setting an array element with a sequence.

6) If m_a and m_b can not be multiplied together
>>> lazy_matrix_mul([1,2,3], [[1,2,3], [4,5,6]])
Traceback (most recent call last):
ValueError: shapes (3,) and (2,3) not aligned: 3 (dim 0) != 2 (dim 0)

7) If one argument is an empty list
>>> lazy_matrix_mul([[]], [[1,2,3], [4,5,6]])
Traceback (most recent call last):
ValueError: shapes (1,0) and (2,3) not aligned: 0 (dim 1) != 2 (dim 0)

8) Success Cases
>>> lazy_matrix_mul([1,2], [[1,2,3], [4,5,6]])
array([ 9, 12, 15])
>>> lazy_matrix_mul([[1,2], [1,2]], [[1,2,3], [4,5,6]])
array([[ 9, 12, 15],
       [ 9, 12, 15]])
